<project xmlns:jacoco="antlib:org.jacoco.ant">

	<property name="project" value="MISSING_NAME" />
	<property name="project.deps" value="" />
	<property name="version" value="devel" />

	<script language="javascript">
		<![CDATA[ 
	        importClass(java.util.Locale);
	        actualDefault = Locale.getDefault();
	        project.setProperty("---actual-default-locale---", actualDefault);
	        Locale.setDefault(Locale.US);
	    ]]>
	</script>

	<property name="project.dir" location="${basedir}" />
	<property name="src.dir" location="${project.dir}/src" />
	<property name="tests.dir" location="${project.dir}/tests" />
	<property name="lib.dir" location="${project.dir}/lib" />
	<property name="build.dir" location="${project.dir}/build" />
	<property name="build.tmp.dir" location="${build.dir}/tmp" />
	<property name="build.bin.dir" location="${build.tmp.dir}/bin" />
	<property name="build.javac.dir" location="${build.bin.dir}/src" />
	<property name="build.ejdt.dir" location="${build.bin.dir}/ejdt" />
	<property name="build.tests.dir" location="${build.bin.dir}/tests" />
	<property name="reports.dir" location="${build.dir}/reports" />
	<property name="reports.junit.dir" location="${reports.dir}/junit" />
	<property name="reports.coverage.dir" location="${reports.dir}/coverage" />
	<property name="reports.pmd.dir" location="${reports.dir}/pmd" />
	<property name="reports.cpd.dir" location="${reports.dir}/cpd" />
	<property name="reports.findbugs.dir" location="${reports.dir}/findbugs" />
	<property name="dist.dir" location="${build.dir}/dist" />
	<property name="tools.lib.dir" location="${basedir}/../buildhealth.build/lib" />

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${tools.lib.dir}/ant-contrib-1.0b3.jar" />

	<if>
		<equals arg1="${project.deps}" arg2="" />
		<then>
			<path id="project.deps.path">
			</path>
		</then>
		<else>
			<filelist id="project.deps.dirs" dir=".." files="${project.deps}" />

			<pathconvert refid="project.deps.dirs" property="project.deps.prop">
				<regexpmapper from="(.*)" to="\1/build/dist" />
			</pathconvert>

			<path id="project.deps.path">
				<fileset dir="${project.deps.prop}">
					<include name="**/*.jar" />
					<exclude name="**/*-source.jar" />
				</fileset>
			</path>
		</else>
	</if>

	<path id="libs.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
			<exclude name="**/*-source.jar" />
		</fileset>
	</path>
	<path id="compile.path">
		<path refid="project.deps.path" />
		<path refid="libs.path" />
	</path>

	<target name="all" depends="init, clean, compile, test, pmd, cpd, findbugs, pack, clean-tmp" description="Compile, test and pack">
	</target>

	<target name="init">
		<tstamp />
	</target>

	<target name="clean" depends="init" description="Delete all build results">
		<delete dir="${build.dir}" quiet="true" />
	</target>

	<target name="clean-tmp" depends="init">
		<delete dir="${build.tmp.dir}" quiet="true" />
	</target>

	<target name="compile" depends="init" description="Compile the sources">
		<delete dir="${build.javac.dir}" quiet="true" />
		<mkdir dir="${build.javac.dir}" />

		<javac destdir="${build.javac.dir}" debug="true" includeantruntime="false">
			<src path="${src.dir}" />
			<classpath refid="compile.path" />
		</javac>
	</target>

	<target name="check-tests">
		<available file="${tests.dir}" property="tests.present" />
	</target>

	<target name="compile-tests" depends="compile, check-tests" if="tests.present">
		<delete dir="${build.tests.dir}" quiet="true" />
		<mkdir dir="${build.tests.dir}" />

		<javac destdir="${build.tests.dir}" debug="true" includeantruntime="false">
			<src path="${tests.dir}" />
			<classpath refid="compile.path" />
			<classpath>
				<pathelement location="${build.javac.dir}" />
			</classpath>
		</javac>

		<copy todir="${build.tests.dir}">
			<fileset dir="${tests.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="test" depends="check-tests, compile-tests" if="tests.present" description="Run the tests">
		<delete dir="${reports.junit.dir}" quiet="true" />
		<mkdir dir="${reports.junit.dir}" />

		<delete dir="${reports.coverage.dir}" quiet="true" />
		<mkdir dir="${reports.coverage.dir}" />

		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpath="${tools.lib.dir}/jacocoant.jar" />

		<jacoco:coverage destfile="${reports.coverage.dir}/jacoco.exec">
			<junit printsummary="yes" fork="yes" forkmode="once">
				<classpath refid="compile.path" />
				<classpath>
					<pathelement location="${build.javac.dir}" />
					<pathelement location="${build.tests.dir}" />
				</classpath>

				<formatter type="xml" />

				<batchtest todir="${reports.junit.dir}">
					<fileset dir="${tests.dir}">
						<include name="**/*Test.java" />
						<exclude name="**/Base*Test.java" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>

		<jacoco:report>
			<executiondata>
				<file file="${reports.coverage.dir}/jacoco.exec" />
			</executiondata>

			<structure name="${project}">
				<classfiles>
					<fileset dir="${build.javac.dir}" />
					<fileset dir="${build.tests.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
					<fileset dir="${tests.dir}" />
				</sourcefiles>
			</structure>

			<html destdir="${reports.coverage.dir}" />
			<xml destfile="${reports.coverage.dir}/jacoco.xml" />
		</jacoco:report>
	</target>

	<target name="pmd" depends="init" description="Run PMD on sources">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
			<classpath>
				<fileset dir="${tools.lib.dir}/pmd">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<delete dir="${reports.pmd.dir}" quiet="true" />
		<mkdir dir="${reports.pmd.dir}" />

		<pmd shortFilenames="true">
			<ruleset>rulesets/java/design.xml</ruleset>
			<ruleset>java-basic</ruleset>
			<formatter type="xml" toFile="${reports.pmd.dir}/pmd_report.xml" />
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${tests.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>

	<target name="cpd" depends="init" description="Run code duplication detector on sources">
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
			<classpath>
				<fileset dir="${tools.lib.dir}/pmd">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<delete dir="${reports.cpd.dir}" quiet="true" />
		<mkdir dir="${reports.cpd.dir}" />

		<cpd minimumTokenCount="100" outputFile="${reports.cpd.dir}/cpd.txt">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${tests.dir}">
				<include name="**/*.java" />
			</fileset>
		</cpd>
	</target>

	<target name="findbugs" depends="init" description="Run FindBugs on sources">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${tools.lib.dir}/findbugs/lib/findbugs-ant.jar" />
		<property name="findbugs.home" value="${tools.lib.dir}/findbugs" />

		<delete dir="${reports.findbugs.dir}" quiet="true" />
		<mkdir dir="${reports.findbugs.dir}" />

		<findbugs home="${findbugs.home}" output="xml:withMessages" outputFile="${reports.findbugs.dir}/findbugs.xml">
			<sourcePath path="${src.dir}" />
			<sourcePath path="${tests.dir}" />
			<class location="${build.javac.dir}" />
			<class location="${build.tests.dir}" />
			<auxClasspath refid="compile.path" />
		</findbugs>
	</target>

	<target name="pack" depends="init" description="Create jar archives">
		<delete dir="${dist.dir}" quiet="true" />
		<mkdir dir="${dist.dir}" />

		<jar jarfile="${dist.dir}/${project}-${version}.jar" basedir="${build.javac.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</jar>
		<jar jarfile="${dist.dir}/${project}-${version}-source.jar" basedir="${src.dir}" />
	</target>

</project>