<project name="buildhealth.build" default="all">

	<property name="projs"
	          value="buildhealth.core,buildhealth.extractors,buildhealth.analysers,buildhealth.notifiers,buildhealth.cli,buildhealth.ant" />
	<property name="version" value="0.1" />

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef resource="proguard/ant/task.properties" classpath="${basedir}/lib/proguard-4.9.jar" />
	<taskdef resource="org/pescuma/mergeservices/antlib.xml" classpath="${basedir}/lib/merge-services.jar" />

	<property name="build.dir" value="${basedir}/build" />
	<property name="build.tmp.dir" value="${build.dir}/tmp" />
	<property name="reports.dir" value="${build.dir}/reports" />

	<target name="all" description="Compile, test, pack and report">
		<delete dir="${build.dir}" quiet="true" />

		<antcall target="call-in-projs">
			<param name="target" value="all" />
		</antcall>

		<antcall target="pack" />

		<antcall target="report" />
	</target>

	<target name="onejar.group">
		<delete dir="${build.tmp.dir}" quiet="true" />
		<mkdir dir="${build.tmp.dir}" />

		<for list="${projs}" param="proj">
			<sequential>
				<unzip dest="${build.tmp.dir}">
					<fileset dir="../@{proj}/build/dist">
						<include name="**/*.jar" />
						<exclude name="**/*-source.jar" />
						<exclude name="**/*-tests.jar" />
					</fileset>
					<fileset dir="../@{proj}/lib">
						<include name="**/*.jar" />
						<exclude name="**/*-source.jar" />
						<exclude name="**/ivy-*.jar" />
						<exclude name="**/ant-*.jar" />
						<exclude name="auto/compile/**/*" />
					</fileset>
				</unzip>
			</sequential>
		</for>

		<delete dir="${build.tmp.dir}/META-INF" includeemptydirs="true">
			<exclude name="native/**" />
			<exclude name="resources/**" />
			<exclude name="*.default" />
		</delete>

		<for list="${projs}" param="proj">
			<sequential>
				<merge-services dest="${build.tmp.dir}">
					<fileset dir="../@{proj}/build/dist">
						<include name="**/*.jar" />
						<exclude name="**/*-source.jar" />
						<exclude name="**/*-tests.jar" />
					</fileset>
					<fileset dir="../@{proj}/lib">
						<include name="**/*.jar" />
						<exclude name="**/*-source.jar" />
						<exclude name="**/ivy-*.jar" />
						<exclude name="**/ant-*.jar" />
						<exclude name="auto/compile/**/*" />
					</fileset>
				</merge-services>
			</sequential>
		</for>
		<delete file="${build.tmp.dir}/META-INF/services/javax.annotation.processing.Processor" />

		<delete dir="${build.dir}/buildhealth*.jar" quiet="true" />

		<jar destfile="${build.dir}/buildhealth.full-${version}.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="org.pescuma.buildhealth.cli.BuildHealthCli" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="${build.tmp.dir}" />
		</jar>

		<delete dir="${build.tmp.dir}" />
	</target>

	<target name="onejar.all">
		<delete file="${build.dir}/${build.dir}/buildhealth-${version}.jar" quiet="true" />

		<proguard>
			-libraryjars "${java.home}/lib/rt.jar"
			-injars      "${build.dir}/buildhealth.full-${version}.jar"
			-outjars     "${build.dir}/buildhealth-${version}.jar"
			-dontoptimize
			-dontobfuscate
			-dontwarn
				
			-keep class org.pescuma.buildhealth.cli.BuildHealthCli {*;}
			-keep class org.pescuma.buildhealth.ant.** {*;}

			-keep class org.pescuma.buildhealth.core.Report {*;}
			-keep class * extends org.pescuma.buildhealth.core.Report {*;}
			-keep class * implements org.pescuma.buildhealth.analyser.BuildHealthAnalyser {*;}
			-keep class * implements org.pescuma.buildhealth.notifiers.BuildHealthNotifier {*;}
			-keep class org.fusesource.jansi.internal.** {*;}
			-keep class com.google.common.base.FinalizableReference {*;}
			-keep class org.jaxen.saxpath.base.XPathReader {*;}
			-keep class net.sf.saxon.TransformerFactoryImpl {*;}
			-keep class net.sf.saxon.dom.DOMObjectModel {*;}
			-keep class net.sf.saxon.event.MessageEmitter {*;}
			-keep class com.thalesgroup.dtkit.junit.* {*;}
			-keep class com.ctc.wstx.stax.WstxInputFactory {*;}
			-keep class com.ctc.wstx.stax.WstxOutputFactory {*;}
			-keep class * implements com.fasterxml.jackson.databind.cfg.ConfigFeature {*;}
			-keep class * implements com.fasterxml.jackson.databind.jsontype.TypeIdResolver {*;}
			-keep class org.pescuma.buildhealth.cli.commands.webserver.BuildHealthWebServer.** {*;}
			
			-dontnote **
		</proguard>
	</target>

	<target name="onejar.cli">
		<delete file="${build.dir}/buildhealth.cli-${version}.jar" quiet="true" />

		<proguard>
			-libraryjars "${java.home}/lib/rt.jar"
			-injars      "${build.dir}/buildhealth.full-${version}.jar"
			-outjars     "${build.dir}/buildhealth.cli-${version}.jar" 
			-dontoptimize
			-dontobfuscate
			-dontwarn
			
			-keep class org.pescuma.buildhealth.cli.BuildHealthCli {*;}
			
			-keep class org.pescuma.buildhealth.core.Report {*;}
			-keep class * extends org.pescuma.buildhealth.core.Report {*;}
			-keep class * implements org.pescuma.buildhealth.analyser.BuildHealthAnalyser {*;}
			-keep class * implements org.pescuma.buildhealth.notifiers.BuildHealthNotifier {*;}
			-keep class org.fusesource.jansi.internal.** {*;}
			-keep class com.google.common.base.FinalizableReference {*;}
			-keep class org.jaxen.saxpath.base.XPathReader {*;}
			-keep class net.sf.saxon.TransformerFactoryImpl {*;}
			-keep class net.sf.saxon.dom.DOMObjectModel {*;}
			-keep class net.sf.saxon.event.MessageEmitter {*;}
			-keep class com.thalesgroup.dtkit.junit.* {*;}
			-keep class com.ctc.wstx.stax.WstxInputFactory {*;}
			-keep class com.ctc.wstx.stax.WstxOutputFactory {*;}
			-keep class * implements com.fasterxml.jackson.databind.cfg.ConfigFeature {*;}
			-keep class * implements com.fasterxml.jackson.databind.jsontype.TypeIdResolver {*;}
			-keep class org.pescuma.buildhealth.cli.commands.webserver.BuildHealthWebServer.** {*;}
			
			-dontnote **
		</proguard>
	</target>

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<target name="wrap.cli" if="isWindows">
		<taskdef name="launch4j"
		         classname="net.sf.launch4j.ant.Launch4jTask"
		         classpath="${basedir}/lib/launch4j/launch4j.jar:${basedir}/lib/launch4j/lib/xstream.jar" />

		<launch4j>
			<config headerType="console"
			        jarPath="${build.dir}\buildhealth.cli-${version}.jar"
			        outfile="${build.dir}\buildhealth-${version}.exe"
			        icon="${basedir}\..\icons\bh.ico">
				<jre minVersion="1.6.0" />
				<versionInfo fileVersion="${version}.0.0"
				             txtFileVersion="${version}"
				             fileDescription="buildhealth cli"
				             copyright="Ricardo Pescuma Domenecci"
				             productVersion="${version}.0.0"
				             txtProductVersion="${version}"
				             productName="buildhealth"
				             internalName="buildhealth"
				             originalFilename="buildhealth.exe" />
			</config>
		</launch4j>
	</target>

	<target name="pack" depends="onejar.group,onejar.all,onejar.cli,wrap.cli">
		<delete file="${build.dir}/buildhealth.cli-${version}.jar" quiet="true" />
		<delete file="${build.dir}/buildhealth.full-${version}.jar" quiet="true" />
	</target>

	<target name="report">
		<taskdef resource="org/pescuma/buildhealth/ant/antlib.xml"
		         classpath="${build.dir}/buildhealth-${version}.jar" />

		<buildhealth home="${reports.dir}/builhealth" report="true" notify="true">
			<config key="coverage good" value="65" />
			<compute-loc>
				<fileset dir="${basedir}/..">
					<exclude name="**/bin/**" />
					<exclude name="**/build/**" />
					<exclude name="**/lib/**" />
					<exclude name="**/work/**" />
					<exclude name="**/target/**" />
				</fileset>
			</compute-loc>
			<add-junit>
				<fileset dir="${basedir}/..">
					<include name="**/reports/junit/*" />
				</fileset>
			</add-junit>
			<add-jacoco>
				<fileset dir="${basedir}/..">
					<include name="**/reports/coverage/*.xml" />
				</fileset>
			</add-jacoco>
			<add-pmd>
				<fileset dir="${basedir}/..">
					<include name="**/reports/pmd/*" />
				</fileset>
			</add-pmd>
			<add-cpd>
				<fileset dir="${basedir}/..">
					<include name="**/reports/cpd/*" />
				</fileset>
			</add-cpd>
			<add-findbugs>
				<fileset dir="${basedir}/..">
					<include name="**/reports/findbugs/*" />
				</fileset>
			</add-findbugs>
			<add-diskusage dir="${build.dir}" />
			<add-github-issues username="pescuma" repository="buildhealth" />
			<compute-tasks>
				<fileset dir="${basedir}/..">
					<include name="**/*.java" />
					<exclude name="**/CodeTasksComputer*.java" />
					<exclude name="**/TasksAnalyser*.java" />
				</fileset>
			</compute-tasks>
		</buildhealth>
	</target>

	<target name="clean" description="Delete all build results">
		<delete dir="${build.dir}" quiet="true" />

		<antcall target="call-in-projs">
			<param name="target" value="clean" />
		</antcall>
	</target>

	<target name="deps" description="Download dependencies needed to build">
		<antcall target="call-in-projs">
			<param name="target" value="deps" />
		</antcall>
	</target>

	<target name="mvn-publish" description="Publish to maven repo at bintray">
		<antcall target="call-in-projs">
			<param name="target" value="mvn-publish" />
		</antcall>
	</target>

	<target name="call-in-projs">
		<for list="${projs}" param="proj">
			<sequential>
				<echo>Calling ${target} in @{proj}</echo>
				<ant antfile="../@{proj}/build.xml" target="${target}" inheritall="false">
					<property name="version" value="${version}" />
				</ant>
			</sequential>
		</for>
	</target>

</project>